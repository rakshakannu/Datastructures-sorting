// naive solution O[(m+n)log(m+n)]

void printunion( int a[], int b[], int m, int n)
{
  int c[m+n];
  for(int i=0;i<m;i++)
  {
    c[i]=a[i];
  }
  for(int j=0;j<n;j++)
  {
    c[m+i]=b[j];
  }
  
  Arrays.sort(c);
  
  for(int i=0;i<m+n;i++)
    if(i==0 || c[i]!=c[i-1])
      System.out.println(c[i]+" ");
}

// better solution using merge function of merge sort O[m+n]

void printunion(int a[], int b[], int m, int n)
{
  while(i<m && j<n)
  {
    if(i>0 && a[i]==a[i-1]){ i++; continue; } // skipping repeated element
    if(j>0 && b[i]==b[i-1]){ j++; continue; } // skipping repeated element
    if(a[i]<b[i]) { System.out.println(a[i]+ " "); i++; }
    else if(a[i]>b[i]) { System.out.println(b[i]+ " "); j++; }
    else { System.out.println(a[i]+" "); i++; j++ }
    while (i<m){ if i==0 || a[i]!=a[i-1]) System.out.printf(a[i]+" "); i++; }
    while (j<n){ if j==0 || b[i]!=b[j-1]) System.out.printf(b[i]+" "); j++; }
  }
}

